{"version":3,"file":"js/background.js","sources":["webpack:///src/background/index.js","webpack:///src/ext/storage.js"],"sourcesContent":["'use strict';\nimport storage from \"../ext/storage\"\nlet is_running = false;  // 避免连续点击\n\n// 移除存入storage的window\nfunction rm_window(){\n  storage.rmLocalStorage(['TimeReminderWinId'])\n}\n\nchrome.runtime.onInstalled.addListener(function (details) {\n  console.log('previousVersion', details.previousVersion);\n  rm_window()\n});\n\n\n// 点击图标执行\nchrome.browserAction.onClicked.addListener(function (tab) {\n  // 首先获得window_id\n  storage.getLocalStorage(['TimeReminderWinId'], function(res){\n    // console.log(window_id)\n    let windowId = res['TimeReminderWinId']\n    if(windowId){\n      // 获得焦点\n      chrome.windows.update(windowId, {\n        'focused': true\n      })\n    }\n    else if (!is_running){\n      is_running = true\n      chrome.windows.create({ url: chrome.runtime.getURL('pages/app.html')}, function(win){  // 回传创建的window对象\n        // window_id = win.id;\n        let saved_data = {\n          'TimeReminderWinId': win.id\n        }\n        storage.setLocalStorage(saved_data, function(){\n          is_running = false\n        })\n      });\n    }\n  });\n});\n\n// 目标窗口被移除\nchrome.windows.onRemoved.addListener((winid)=>{\n  // console.log(winid)\n  storage.getLocalStorage(['TimeReminderWinId'], function(res){\n    let windowId = res['TimeReminderWinId']\n    if(windowId == winid){\n      rm_window()\n    }\n  })\n})\n\n// router\nchrome.webRequest.onBeforeRequest.addListener(function (info) {\n  console.log(info.url)\n  var runtimeId = chrome.runtime.id\n  var urlWithoutProtocol = info.url.split('//')[1]\n  var path = urlWithoutProtocol.substring(runtimeId.length)\n  if(info.url.indexOf(\"#\") < 0){  // 不用跳转\n    return;\n  }\n  /**\n   * We have to redirect every actual navigational request to index.html because we do not have a webserver\n   * and cannot simply serve index.html with every request.\n   * But we also want to keep the routing for the vue app, so we redirect to index.html with an additional parameter\n   * 'route' that resembles the route for vue-router. We pickup this parameter in routes/index.js and redirect to\n   * the actual vue component that we wanted to load.\n   *\n   * We do not want to redirect assets and static files, so we split the path at '.' to check if it has an extension.\n   * Every path with an extension listed in STATIC_EXTENSIONS will not be redirected.\n   *\n   * Hint: this behavior is only triggered on page refresh (e.g. \"F5\"). Navigation normally will trigger vue-router\n   * directly and is not handled by listener.\n   */\n  // var ext = path.split('.').pop()\n  // var STATIC_EXTENSIONS = ['html', 'js', 'css', 'gz', 'png', 'woff2', 'ttf']\n  // if (STATIC_EXTENSIONS.indexOf(ext) < 0) {\n  //   return {redirectUrl: \"chrome-extension://\" + runtimeId + '/app.html' + '?route=' + path}\n  // }\n},\n{\n  urls: [\"chrome-extension://\" + chrome.runtime.id + \"/*\"]\n},\n[\"blocking\"]\n);\n\n\n// WEBPACK FOOTER //\n// src/background/index.js","/**\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage}\n */\nexport default {\n  getSyncStorage(key, callback){\n    chrome.storage.sync.get(key, function(result) {\n      console.log(key +' value currently is(sync): ');\n      console.log(result)\n      if(callback){\n        callback(result)\n      }\n    });\n  },\n  setSyncStorage(obj, callback){\n    chrome.storage.sync.set(obj, function() {\n      console.log('Obj is saved(sync):');\n      console.log(obj)\n      if(callback){\n        callback()\n      } \n    });\n  },\n  rmSyncStorage(key, callback){\n    chrome.storage.sync.remove(key, function() {\n      // console.log(key + ' is removed from storage');\n      if(callback){\n        callback()\n      }\n    });\n  },\n  getLocalStorage(key, callback){\n    chrome.storage.local.get(key, function(result) {\n      console.log(key +' value currently is(local): ');\n      console.log(result)\n      if(callback){\n        callback(result)\n      }\n    });\n  },\n  setLocalStorage(obj, callback){\n    chrome.storage.local.set(obj, function() {\n      console.log('Obj is saved(local):');\n      console.log(obj)\n      if(callback){\n        callback()\n      } \n    });\n  },\n  rmLocalStorage(key, callback){\n    chrome.storage.local.remove(key, function() {\n      // console.log(key + ' is removed from storage');\n      if(callback){\n        callback()\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/ext/storage.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;;;;;;;;ACjFA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;;;;A","sourceRoot":""}